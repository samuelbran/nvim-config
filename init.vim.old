syntax enable
set cursorline
set background=dark
set termguicolors
set lazyredraw
set synmaxcol=150
set cindent
set number relativenumber
set hidden
set smarttab
set expandtab
set nowrap
set noswapfile
set nobackup
set nowritebackup
set noerrorbells
set incsearch
set smartcase
set wildmenu
set encoding=UTF-8
set nofoldenable
set tabstop=2
set softtabstop=2
set shiftwidth=2
set signcolumn=yes
set colorcolumn=80
set numberwidth=4
set path+=**
set wildignore+=**/node_modules/**
set updatetime=300
set cmdheight=2
set shortmess+=c
set splitbelow
set splitright
set clipboard=unnamedplus
set noshowmode
set modifiable
let mapleader = " "
let g:vim_json_conceal=0

call plug#begin('~/.vim/plugged')
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'junegunn/fzf.vim'
	Plug 'vim-airline/vim-airline'
  Plug 'airblade/vim-gitgutter'
  Plug 'HerringtonDarkholme/yats.vim'
  Plug 'maxmellon/vim-jsx-pretty'
  Plug 'pangloss/vim-javascript'
  Plug 'ryanoasis/vim-devicons'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-surround'
  Plug 'tpope/vim-fugitive'
  Plug 'sainnhe/gruvbox-material'
  Plug 'moll/vim-bbye'
  Plug 'psliwka/vim-smoothie'
  Plug 'arcticicestudio/nord-vim'
  Plug 'jackguo380/vim-lsp-cxx-highlight'
  Plug 'vim-syntastic/syntastic'
  Plug 'rhysd/vim-clang-format'
  Plug 'digitaltoad/vim-pug'
  Plug 'ayu-theme/ayu-vim'
  Plug 'Jorengarenar/vim-darkness'
  " Plug 'rainglow/vim'
  " Plug 'dracula/vim', { 'as': 'dracula' }
  " Plug 'tpope/vim-repeat'
  " Plug 'tpope/vim-fugitive'
  " Plug 'morhetz/gruvbox'
  Plug 'vim-airline/vim-airline-themes'
  " Plug 'aserebryakov/vim-todo-lists'
call plug#end()

let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Comment'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" Colorscheme
" let g:gruvbox_material_background = 'hard'
" let g:gruvbox_material_palette = 'material'
" colorscheme gruvbox-material
let ayucolor="mirage"
colorscheme ayu

" Airline
let g:airline_theme = 'base16'
let g:airline_powerline_fonts = 1
" let g:airline_left_sep=""
" let g:airline_right_sep=""

"FZF
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.7 } }

" Custom Colors
highlight ColorColumn guibg=#28303F
highlight CursorLine guibg=#28303F
highlight SignColumn guibg=#212733
highlight LineNR guifg=#707A8E
highlight CursorLineNR gui=bold guifg=#D8DEE9
highlight VertSplit guifg=#2D333E

highlight GitGutterAdd guifg=#2ed285 guibg=#212733
highlight GitGutterChange guifg=#fabd2f guibg=#212733
highlight GitGutterDelete guifg=#fb4934 guibg=#212733
highlight GitGutterChangeDelete guifg=#fe8019 guibg=#212733

highlight CocFloating guibg=#242B38
highlight CocErrorSign guifg=#F28779 guibg=#212733
highlight CocHintSign guifg=#458588 guibg=#212733
highlight CocInfoSign guifg=#fabd2f guibg=#212733
highlight CocWarningSign guifg=#fe8019 guibg=#212733
highlight CocExplorerNormalFloatBorder guifg=#A5AEBF guibg=#212733
highlight CocExplorerNormalFloat guibg=#212733
highlight CocExplorerSelectUI guibg=#2F3542
highlight CocExplorerFileDirectory guifg=#D8DEE9
highlight CocExplorerFileDirectoryExpanded guibg=#242B38
highlight CocExplorerGitContentChange guifg=#FFD580
highlight CocExplorerGitDeleted guifg=#fe8019
highlight CocExplorerGitUntracked guifg=#5ccfe6
highlight CocExplorerGitAdded guifg=#bae67e
highlight Normal guibg=none
highlight NonText guibg=none
set fillchars+=vert:\‚ñè

nnoremap <leader>q :Bdelete<CR>

nnoremap <leader>h :wincmd h<CR>
nnoremap <leader>j :wincmd j<CR>
nnoremap <leader>k :wincmd k<CR>
nnoremap <leader>l :wincmd l<CR>

" Use space + n to navigate tabs
nnoremap <leader>1 :b1<CR>
nnoremap <leader>2 :b2<CR>
nnoremap <leader>3 :b3<CR>
nnoremap <leader>4 :b4<CR>
nnoremap <leader>5 :b5<CR>
nnoremap <leader>6 :b6<CR>
nnoremap <leader>7 :b7<CR>
nnoremap <leader>8 :b8<CR>
nnoremap <leader>9 :b9<CR>

" Use alt + hjkl to resize windows
nnoremap <M-j> :resize -2<CR>
nnoremap <M-k> :resize +2<CR>
nnoremap <M-h> :vertical resize -2<CR>
nnoremap <M-l> :vertical resize +2<CR>

nmap <space>e :Files<CR>
nnoremap <silent> <leader>f :Ag<CR>
inoremap <C-s> <C-o>:w<CR>

nmap <leader>z za
nmap <leader>gs :G<CR>
nmap <leader>gc :Gcommit<CR>
imap jk <Esc>
imap jj <Esc>

command! C let @/=""

" TAB in normal mode will move to text buffer
nnoremap <TAB> :bnext<CR>
" SHIFT-TAB will go back
nnoremap <S-TAB> :bprevious<CR>

" Prettier
command! -nargs=0 Prettier :CocCommand prettier.formatFile

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
if has('patch8.1.1068')
  " Use `complete_info` if your (Neo)Vim version supports it.
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  imap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
" autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
" xmap <leader>f  <Plug>(coc-format-selected)
" nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current line.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Introduce function text object
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <TAB> for selections ranges.
" NOTE: Requires 'textDocument/selectionRange' support from the language server.
" coc-tsserver, coc-python are the examples of servers that support it.
" nmap <silent> <TAB> <Plug>(coc-range-select)
" xmap <silent> <TAB> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings using CoCList:
" Show all diagnostics.
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
" nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>

nmap <space>E :CocCommand explorer --position floating<CR>

" Folds
set foldmethod=manual
" set foldnestmax=1
" autocmd BufWinLeave *.* mkview
" autocmd BufWinEnter *.* silent loadview

au BufNewFile,BufRead /*.rasi setf javascript

" c++ syntax highlighting
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
" c++ linting
let g:syntastic_cpp_checkers = ['cpplint']
let g:syntastic_c_checkers = ['cpplint']
let g:syntastic_cpp_cpplint_exec = 'cpplint'
" The following two lines are optional. Configure it to your liking!
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" c++ autoformating
let g:clang_format#style_options = {
            \ "AccessModifierOffset" : -4,
            \ "AllowShortIfStatementsOnASingleLine" : "true",
            \ "AlwaysBreakTemplateDeclarations" : "true",
            \ "Standard" : "C++11"}
autocmd FileType c ClangFormatAutoEnable
nnoremap <Leader>j :<C-u>ClangFormat<CR>
